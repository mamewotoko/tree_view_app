/**
 *
 * This is a bugfix of the grammar written by Sriram Sankar for Java 1.1,
 * modified by David Williamns for Java 1.2, by Andrea Gini for Java 1.4
 * and finally by Marco Savard to include a missing construct.
 *
 * According wiht the Java Language Sytax Specification, rules Classbody,
 * ClassBodyDeclarations, InterfaceBody and InterfaceBodyDeclarations, you
 * can put any number of semicolon between any production you can find
 * inside a class or an interface. These extra semicolons must be treated
 * in a different way from semicolons that concludes some production
 * (like abstract method declarations or field declarations), because the
 * latter are mandatory. So I removed the modification previously added
 * by Marco Savard to the production FieldDeclaration() (duplication of ";")
 * and added ";" as an optional derivation inside ClassBodyDeclaration() and
 * InterfaceBodyDeclaration(), in a way that mimic the official 
 * Java Grammar, that can be found at the following adress:
 * http://java.sun.com/docs/books/jls/second_edition/html/syntax.doc.html 
 *
 * As an informal proof of correctness, now this grammar accepts all the 3887
 * files of the JDK1.4 API.
 *
 * Thanks to Marco Savard for having pointed out the problem.
 *
 * To track changes, search for the string "// added by Andrea Gini2"
 *
 * Andrea Gini, 05/05/2002
 * ginian@tiscali.it
 *
 *====================================================================
 *
 * According the point #19 of the java 1.2 compatibility document of Sun
 * (http://java.sun.com/products/jdk/1.2/compatibility.html), the following
 * construct is valid since java 1.2 : 
 * 
 * class D extends C {
 *   void f() {
 *   // overrides f() to run it in a new thread
 *       new Thread(new Runnable() {
 *           public void run() {
 *	        D.super.f();
 *	    }
 *	 }).start();
 *    }
 * }
 *
 * Unfortunely, this was not supported by the previous grammar. So 
 * I have adapted the grammar in order to support it. 
 *
 * To track changes, search for the string "Modified by Marco Savard"
 *
 * Marco Savard, 28/03/2002
 * marco.savard@magna-solutions.de
 *
 * ==================================================================
 *
 * This is a modified version of the grammar written by Sriram Sankar for Java 1.1
 * and modified by David Williamns for Java 1.2. It has been modified to accept Java
 * sources for Java 1.4. The grammar have been modified in four parts: <br> 
 * 1) 'assert' has been included to the keyword list<br>
 * 2) AssertStatement() production has been added<br>
 * 3) the production Statement() has been modified in order to support AssertStatement()<br>
 * 4) in the main the string "for Java1.2 code" has been changed with "for Java1.4 code"<br>
 *
 * To track changes, search for the string "// added by Andrea Gini"
 *
 * Andrea Gini, 24/02/2002
 * ginian@tiscali.it
 *
 * ==================================================================
 *
 * This file is a modified version of one originally found in the
 * JavaGrammars Examples directory of JavaCC1_1. It has been
 * modified to accept Java source code for Java 1.2. Basically,
 * this means a new key word was added, 'strictfp', and that keyword
 * added to the appropriate productions and LOOKAHEADs (where other,
 * similar keywords are listed as possible choices). This involved
 * changing 11 lines.
 *
 * Minor changes were also made to the main program for testing.
 *
 * The goal of this effort was for the grammar to be able to parse
 * any legal Java 1.2 source code. It does not reject all illegal
 * cases, but neither did the original. Plus, when it comes to
 * the new 'strictfp' keyword, the Java Compiler from Sun (JDK1.2.1)
 * also does not reject all illegal cases, as defined by the
 * "Updates" document found at
 *       http://java.sun.com/docs/books/jls/strictfp-changes.pdf
 * (see the testcases.txt file for details).
 *
 * David Williams, 7/99
 * ===================================================================
 *
 *
 * Copyright (C) 1996, 1997 Sun Microsystems Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.  You may, however,
 * make any modifications you wish to this file.
 *
 * Java files generated by running JavaCC on this file (or modified versions
 * of this file) may be used in exactly the same manner as Java files
 * generated from any grammar developed by you.
 *
 * Author: Sriram Sankar
 * Date: 3/5/97
 *
 * This file contains a Java grammar and actions that implement a front-end.
 *
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC = false;
}

PARSER_BEGIN(JavaParser)
import java.util.*;
import java.io.*;

public class JavaParser
{

    public static boolean line_mode = false;

    private String _filename = null;

    public static class MetaInfo {
	public MetaInfo(int startline, int startcolumn)
	{
	    _startline = startline;
	    _startcolumn = startcolumn;
	}

	public int getStartLine()
	{
	    return _startline;
	}

	public int getStartColumn()
	{
	    return _startcolumn;
	}

	public String xmlOfPosition()
	{
	    return " startline=\"" + _startline +"\" startcolumn=\"" + _startcolumn + "\"";
	}

	public int _startline;
	public int _startcolumn;
    }

    public static class CallInfo extends MetaInfo {
	public CallInfo(String expressionstr, int startline, int startcolumn, String filename)
	{
	    super(startline, startcolumn);
	    _expressionstr = expressionstr;
	    _filename = filename;
	}
	
	public String toString()
	{
	    return _expressionstr;
	}

	public String toXML()
	{
	    String filename = _filename != null ? " filename=\"" + _filename + "\"" : "";
	    return "\t\t\t<" + _expressionstr + " kind=\"call\"" + (line_mode ? xmlOfPosition() : "") + filename + " />\n"; 
	}

	public String getFilename()
	{
	    return _filename;
	}
	
	private String _expressionstr;
	private String _filename = null;
    }
    
    public static class NameInfo {
	public NameInfo(String name, int startline, int startcolumn)
	{
	    _startline = startline;
	    _startcolumn = startcolumn;
	    _name = name;
	}

	public String getName()
	{
	    return _name;
	}

	public int getStartLine()
	{
	    return _startline;
	}

	public int getStartColumn()
	{
	    return _startcolumn;
	}

	private int _startline;
	private int _startcolumn;
	private String _name;
    }

    public static class ClassInfo extends MetaInfo {
	public ClassInfo(String classname, Vector methods, boolean is_class, int startline, int startcolumn) 
	{
	    super(startline, startcolumn);
	    _classname = classname;
	    _methods = methods;
	    _is_class = is_class;
	}

	public String toString()
	{
	    StringBuffer sb = new StringBuffer();
	    sb.append(_classname + "\n");
	    for(int i = 0; i < _methods.size(); i++) {
		sb.append("\t" + _methods.get(i).toString() + "\n");
	    }
	    return sb.toString();
	}
	
	public String toXML() 
	{
	    StringBuffer sb = new StringBuffer();
	    if(line_mode) {
		sb.append("<" + _classname + " kind=\"class\"" + xmlOfPosition() +">\n");
	    }
	    else {
		sb.append("<" + _classname + " kind=\"class\">\n");
	    }
	    
	    for(int i = 0; i < _methods.size(); i++) {
		MethodInfo mi = (MethodInfo)_methods.get(i);
		sb.append(mi.toXML());
	    }
	    sb.append("</" + _classname + ">\n");
	    return sb.toString();
	}

	public String getName()
	{
	    return _classname;
	}

	public Vector getMethods() 
	{
	    return _methods;
	}

	public Vector _methods;
	public String _classname;
	public boolean _is_class;
    }
    
    public static class MethodInfo extends MetaInfo {
	public MethodInfo(String name, Vector calls, String typestr, int startline, int startcolumn, String filename) 
	{
	    super(startline, startcolumn);
	    _name = name;
	    _calls = calls;
	    _filename = filename;
	    _typestr = typestr;
	}
	
	public String toXML()
	{
	    StringBuffer sb = new StringBuffer();
	    String filename = _filename != null ? " filename=\"" + _filename + "\"" : "";

	    if(line_mode) {
		sb.append("\t\t<" + _name + " type=\"" + _typestr + "\" kind=\"method\"" + xmlOfPosition() + filename + " >\n");
	    }
	    else {
		sb.append("\t\t<" + _name + " type=\"" + _typestr + "\" " + filename + " kind=\"method\">\n");
	    }

	    for(int i = 0; i < _calls.size(); i++) {
		sb.append(((CallInfo)_calls.get(i)).toXML());
	    }
	    sb.append("\t\t</" + _name + ">\n");

	    return sb.toString();
	}

	public String getName() 
	{
	    return _name;
	}

	public Vector getCalls()
	{
	    return _calls;
	}

	public String getType()
	{
	    return _typestr;
	}

	public String getFilename()
	{
	    return _filename;
	}

	private String _name;
	private Vector _calls;
	private String _filename = null;
	private String _typestr;
    }

    public static class MethodToken {
	public MethodToken(Token t, String typestr)
	{
	    _t = t;
	    _typestr = typestr;
	}
	
	public String getType()
	{
	    return _typestr;
	}

	public Token getToken()
	{
	    return _t;
	}

// 	public String toString()
// 	{
// 	    return _t.image+"("+_typestr+")";
// 	}

// 	public int getStartLine()
// 	{
// 	    return _t.beginLine;
// 	}
// 	public int getStartColumn()
// 	{
// 	    return _t.beginColumn;
// 	}
	
	private String _typestr;
	private Token _t;
    }

    //Vector of ClassInfo
    public static Vector parse(String filename)
    {
	Vector classes = new Vector();
	parse(filename, classes);
	return classes;
    }

    public static void parse(String filename, Vector classes)
    {
	try {
	    InputStream is = new FileInputStream(filename);
	    JavaParser parser = new JavaParser(filename, is);
	    parser.CompilationUnit(classes);
	    is.close();
	}
	catch(Exception e) {
	    e.printStackTrace();
	}
    }

    public static void parse(InputStream is, Vector classes) 
    {
	try {
	    JavaParser parser = new JavaParser(is);
	    parser.CompilationUnit(classes);
	}
	catch(Exception e) {
	    e.printStackTrace();
	}
    }


    public JavaParser(String filename, InputStream is) 
    {
	this(is);
	_filename = new File(filename).getAbsolutePath();
    }

// modified main Andrea Gini 24/02/2002
// modified main. DW, 7/99
    public static void main (String [] args) {
        JavaParser parser;
        String filename = "";

	if(args.length == 0) {
	    System.err.println("no arg!!");
	    System.exit(0);
	}

	Vector classes = new Vector();
        try {
	    for(int i = 0; i < args.length; i++) {
		if(args[i].equals("-l")) {
		    line_mode = true;
		}
		else {
		    filename = args[i];
		    parse(filename, classes);
		}
	    }

	    System.out.print("<?xml version=\"1.0\" encoding=\"euc-jp\"?>\n<files>\n");
	    for(int j = 0; j < classes.size(); j++) {
		ClassInfo ci = (ClassInfo)classes.get(j);
		System.out.print(ci.toXML());
	    }
	    System.out.print("</files>\n");
	    
        } catch (Exception e)
        {
            System.err.println(e.getMessage());
        }
    }
}

PARSER_END(JavaParser)


/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
| < STRICTFP: "strictfp" >
// added by Andrea Gini
| < ASSERT: "assert" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}


/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

void CompilationUnit(Vector result) :
{}
{
  [ PackageDeclaration() ]
  ( ImportDeclaration() )*
  ( TypeDeclaration(result) )*
  <EOF>
}

void PackageDeclaration() :
{}
{
  "package" Name() ";"
}

void ImportDeclaration() :
{}
{
  "import" Name() [ "." "*" ] ";"
}

void TypeDeclaration(Vector result) :
{}
{
  LOOKAHEAD( ( "abstract" | "final" | "public" | "strictfp" )* "class" )
  ClassDeclaration(result)
|
  InterfaceDeclaration(result)
|
  ";"
}


/*
 * Declaration syntax follows.
 */

void ClassDeclaration(Vector result) :
{}
{
  ( "abstract" | "final" | "public" | "strictfp")*
  UnmodifiedClassDeclaration(result)
}

void UnmodifiedClassDeclaration(Vector result) :
{
    Token t;
    ClassInfo new_class = null;
    Vector methods = new Vector();
}
{
    "class" (t = <IDENTIFIER>) [ "extends" Name() ] [ "implements" NameList() ]
	ClassBody(methods)
	{ result.add(new ClassInfo(t.image, methods, true, t.beginLine, t.beginColumn)); }
}

void ClassBody(Vector methods) :
{
}
{
  "{" ( ClassBodyDeclaration(methods) )* "}"
}

void NestedClassDeclaration() :
{}
{
  ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")*
  UnmodifiedClassDeclaration(new Vector())
}

/* Modified by Andrea Gini 2 
 * According rules ClassBody and ClassBodyDeclaration
 * in the Java Language Specification,
 * semi-colons can be duplicated.
 * Source : http://java.sun.com/docs/books/jls/second_edition/html/syntax.doc.html
 */ 

void ClassBodyDeclaration(Vector methods) :
{
}
{
  LOOKAHEAD(2)
  Initializer()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( [ "public" | "protected" | "private" ] Name() "(" )
      ConstructorDeclaration(methods)
|
      LOOKAHEAD( MethodDeclarationLookahead() )
	  MethodDeclaration(methods)
|
  FieldDeclaration()
|             // added by Andrea Gini2
  ";"         // added by Andrea Gini2
}

// This production is to determine lookahead only.
void MethodDeclarationLookahead() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" | "strictfp")*
  ResultType() <IDENTIFIER> "("
}

void InterfaceDeclaration(Vector result) :
{}
{
  ( "abstract" | "public" | "strictfp")*
  UnmodifiedInterfaceDeclaration(result)
}

void NestedInterfaceDeclaration() :
{}
{
  ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")*
  UnmodifiedInterfaceDeclaration(new Vector())
}

void UnmodifiedInterfaceDeclaration(Vector result) :
{
    Token t;
    ClassInfo new_class = null;
    Vector methods = new Vector();
}
{
  "interface" (t = <IDENTIFIER>) [ "extends" NameList() ]
  "{" ( InterfaceMemberDeclaration(methods) )* "}"
      { result.add(new ClassInfo(t.image, methods, false, t.beginLine, t.beginColumn)); }
}
/* Modified by Andrea Gini 2 
 * According to rules InterfaceBody and InterfaceBodyDeclaration
 * in the Java Language Specification,
 * semi-colons can be duplicated.
 * Source : http://java.sun.com/docs/books/jls/second_edition/html/syntax.doc.html
 */ 
void InterfaceMemberDeclaration(Vector methods) :
{
}
{
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration(methods)
|
  FieldDeclaration()
|             // added by Andrea Gini2
  ";"         // added by Andrea Gini2
}

void FieldDeclaration() :
{
    Vector dummy = new Vector();
}
{
  ( "public" | "protected" | "private" | "static" | "final" | "transient" | "volatile" )*
  Type() VariableDeclarator(dummy) ( "," VariableDeclarator(dummy) )* ";"
}

void VariableDeclarator(Vector calls) :
{}
{
  VariableDeclaratorId() [ "=" VariableInitializer(calls) ]
}

void VariableDeclaratorId() :
{}
{
  <IDENTIFIER> ( "[" "]" )*
}

void VariableInitializer(Vector calls) :
{}
{
    ArrayInitializer(calls)
|
  Expression(calls)
}

void ArrayInitializer(Vector calls) :
{}
{
  "{" [ VariableInitializer(calls) ( LOOKAHEAD(2) "," VariableInitializer(calls) )* ] [ "," ] "}"
}

void MethodDeclaration(Vector methods) :
{
    MethodToken mt = null;
    Token t = null;
    Vector calls = new Vector();
}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" | "strictfp")*
  ResultType() (mt = MethodDeclarator()) [ "throws" NameList() ]
      ( Block(calls) | ";" )
      { t = mt.getToken();
      MethodInfo mi = new MethodInfo(t.image, calls, mt.getType(), t.beginLine, t.beginColumn, _filename);
      methods.add(mi); }
}

MethodToken MethodDeclarator() :
{
    Token t = null;
    String typestr = "";
}
{
    (t = <IDENTIFIER>) (typestr = FormalParameters()) ( "[" "]" )*
	{ return new MethodToken(t, typestr); }
}

String FormalParameters() :
{
    StringBuffer sb = new StringBuffer();
    NameInfo ni = null;
}
{
    "(" [ (ni = FormalParameter() { sb.append(ni.getName()); })
	  ( "," (ni = FormalParameter()) { sb.append("," + ni.getName()); } )* ] ")"
	{ return sb.toString(); }
}

NameInfo FormalParameter() :
{
    NameInfo ni = null;
}
{
  [ "final" ] (ni = Type()) VariableDeclaratorId()
      { return ni; }
}

void ConstructorDeclaration(Vector methods) :
{
    String typestr = null;
    Token t = null;
    Vector calls = new Vector();
}
{
  [ "public" | "protected" | "private" ]
      (t = <IDENTIFIER>) (typestr = FormalParameters()) [ "throws" NameList() ]
  "{"
    [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation(calls) ]
      ( BlockStatement(calls) )*
  "}"
      { MethodInfo mi = new MethodInfo(t.image, calls, typestr, t.beginLine, t.beginColumn, _filename);
      methods.add(mi); }
}

void ExplicitConstructorInvocation(Vector calls) :
{}
{
  LOOKAHEAD("this" Arguments(calls) ";")
  "this" Arguments(calls) ";"
|
  [ LOOKAHEAD(2) PrimaryExpression(new Vector()) "." ] "super" Arguments(calls) ";"
}

void Initializer() :
{}
{
  [ "static" ] Block(new Vector())
      { System.err.println("initializer is not supported yet."); }
}


/*
 * Type, name and expression syntax follows.
 */

NameInfo Type() :
{
    NameInfo ni = null;
    boolean is_array = false;
}
{
    (ni = PrimitiveType() | ni = Name()) ( "[" "]" { is_array = true; } )*
    { return new NameInfo(ni.getName() + (is_array ? "[]" : ""), 0, 0); }
}

NameInfo PrimitiveType() :
{
    NameInfo ni = null;
}
{
    "boolean"
{ return new NameInfo("boolean", 0, 0); }
|
  "char"
{ return new NameInfo("char", 0, 0); }
|
  "byte"
{ return new NameInfo("byte", 0, 0); }
|
  "short"
{ return new NameInfo("short", 0, 0); }
|
  "int"
{ return new NameInfo("int", 0, 0); }
|
  "long"
{ return new NameInfo("long", 0, 0); }
|
  "float"
{ return new NameInfo("float", 0, 0); }
|
  "double"
{ return new NameInfo("double", 0, 0); }
}

void ResultType() :
{}
{
  "void"
|
  Type()
}

NameInfo Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{
    Token t = null;
    int startline = 0;
    int startcolumn = 0;
    StringBuffer sb =  new StringBuffer();
}
{
    (t = <IDENTIFIER>
	{ sb.append(t.image);
	  startline = t.beginLine;
	  startcolumn = t.beginColumn; })
	( LOOKAHEAD(2) "." (t = <IDENTIFIER>)
	{ sb.append("." + t.image); } )*
	{ return new NameInfo(sb.toString(), startline, startcolumn); }
}

void NameList() :
{}
{
  Name()
  ( "," Name()
  )*
}


/*
 * Expression syntax follows.
 */

void Expression(Vector calls) :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{}
{
  ConditionalExpression(calls)
  [
    AssignmentOperator() Expression(calls)
  ]
}

void AssignmentOperator() :
{}
{
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="
}

void ConditionalExpression(Vector calls) :
{}
{
  ConditionalOrExpression(calls) [ "?" Expression(calls) ":" ConditionalExpression(calls) ]
}

void ConditionalOrExpression(Vector calls) :
{}
{
  ConditionalAndExpression(calls) ( "||" ConditionalAndExpression(calls) )*
}

void ConditionalAndExpression(Vector calls) :
{}
{
  InclusiveOrExpression(calls) ( "&&" InclusiveOrExpression(calls) )*
}

void InclusiveOrExpression(Vector calls) :
{}
{
    ExclusiveOrExpression(calls) ( "|" ExclusiveOrExpression(calls) )*
}

void ExclusiveOrExpression(Vector calls) :
{}
{
  AndExpression(calls) ( "^" AndExpression(calls) )*
}

void AndExpression(Vector calls) :
{}
{
  EqualityExpression(calls) ( "&" EqualityExpression(calls) )*
}

void EqualityExpression(Vector calls) :
{}
{
  InstanceOfExpression(calls) ( ( "==" | "!=" ) InstanceOfExpression(calls) )*
}

void InstanceOfExpression(Vector calls) :
{}
{
    RelationalExpression(calls) [ "instanceof" Type() ]
}

void RelationalExpression(Vector calls) :
{}
{
    ShiftExpression(calls) ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression(calls) )*
}

void ShiftExpression(Vector calls) :
{}
{
    AdditiveExpression(calls) ( ( "<<" | ">>" | ">>>" ) AdditiveExpression(calls) )*
}

void AdditiveExpression(Vector calls) :
{}
{
  MultiplicativeExpression(calls) ( ( "+" | "-" ) MultiplicativeExpression(calls) )*
}

void MultiplicativeExpression(Vector calls) :
{}
{
    UnaryExpression(calls) ( ( "*" | "/" | "%" ) UnaryExpression(calls) )*
}

void UnaryExpression(Vector calls) :
{}
{
  ( "+" | "-" ) UnaryExpression(calls)
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus(calls)
}

void PreIncrementExpression() :
{}
{
  "++" PrimaryExpression(new Vector())
}

void PreDecrementExpression() :
{}
{
  "--" PrimaryExpression(new Vector())
}

void UnaryExpressionNotPlusMinus(Vector calls) :
{}
{
  ( "~" | "!" ) UnaryExpression(calls)
|
  LOOKAHEAD( CastLookahead() )
  CastExpression(calls)
|
  PostfixExpression(calls)
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Name() "[")
  "(" Name() "[" "]"
|
  "(" Name() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}

void PostfixExpression(Vector calls) :
{}
{
  PrimaryExpression(calls) [ "++" | "--" ]
}

void CastExpression(Vector calls) :
{}
{
  LOOKAHEAD("(" PrimitiveType())
  "(" Type() ")" UnaryExpression(calls)
|
  "(" Type() ")" UnaryExpressionNotPlusMinus(calls)
}

void PrimaryExpression(Vector calls) :
{
    CallInfo ci = null;

}
{
    (ci = PrimaryPrefix(calls)) ( LOOKAHEAD(2) PrimarySuffix(ci, calls) )*
    //PrimaryPrefix(callinfo, calls) [ LOOKAHEAD(2) PrimarySuffixList(callinfo, calls) ]
}

CallInfo PrimaryPrefix(Vector calls) :
{
    CallInfo ci  = null;
    NameInfo ni = null;
}
{
    Literal() { return null; }
|
  "this"
       { return null; }
|
      "super" "." <IDENTIFIER>
       { return null; }
|
  "(" Expression(calls) ")"
      { System.err.println("expression.method() is not supported yet");
      return null;}
|
      AllocationExpression(calls)
	  { return null; }
|
	  LOOKAHEAD( ResultType() "." "class" )
	      ResultType() "." "class"
	      { return null; }
|
	      (ni = Name())
   { return new CallInfo(ni.getName(), ni.getStartLine(), ni.getStartColumn(), _filename); }
}

/* Add "." "super" to be compatible with Java 1.2, 
 * Modified by Marco Savard
 */ 
void PrimarySuffix(CallInfo ci, Vector calls) :
{
    Token t = null;
}
{
  LOOKAHEAD(2)
  "." "this"
|
  LOOKAHEAD(2)
  "." "super"  
|
  LOOKAHEAD(2)
  "." AllocationExpression(calls)
|
  "[" Expression(calls) "]"
|
      "." (t = <IDENTIFIER>)
      { calls.add(new CallInfo(t.image, t.beginLine, t.beginColumn, _filename)); }
|
  Arguments(calls)
      { if (ci != null) 
	  calls.add(ci); }
}

void Literal() :
{}
{
  <INTEGER_LITERAL>
|
  <FLOATING_POINT_LITERAL>
|
  <CHARACTER_LITERAL>
|
  <STRING_LITERAL>
|
  BooleanLiteral()
|
  NullLiteral()
}

void BooleanLiteral() :
{}
{
  "true"
|
  "false"
}

void NullLiteral() :
{}
{
  "null"
}

void Arguments(Vector calls) :
{}
{
  "(" [ ArgumentList(calls) ] ")"
}

void ArgumentList(Vector calls) :
{}
{
  Expression(calls) ( "," Expression(calls) )*
}

void AllocationExpression(Vector calls) :
{}
{
  LOOKAHEAD(2)
  "new" PrimitiveType() ArrayDimsAndInits(calls)
|
  "new" Name()
    (
      ArrayDimsAndInits(calls)
    |
      Arguments(calls) [ ClassBody(new Vector()) ]
    )
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits(Vector calls) :
{}
{
  LOOKAHEAD(2)
  ( LOOKAHEAD(2) "[" Expression(calls) "]" )+ ( LOOKAHEAD(2) "[" "]" )*
|
  ( "[" "]" )+ ArrayInitializer(calls)
}


/*
 * Statement syntax follows.
 */

void Statement(Vector calls) :
{}
{
  LOOKAHEAD(2)
  LabeledStatement(calls)
|
  Block(calls)
|
  EmptyStatement()
|
  StatementExpression(calls) ";"
|
  SwitchStatement(calls)
|
  IfStatement(calls)
|
  WhileStatement(calls)
|
  DoStatement(calls)
|
  ForStatement(calls)
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement(calls)
|
  ThrowStatement(calls)
|
  SynchronizedStatement(calls)
|
  TryStatement(calls)
// added by Andrea Gini
|
  AssertStatement()
}

void LabeledStatement(Vector calls) :
{}
{
  <IDENTIFIER> ":" Statement(calls)
}

void Block(Vector calls) :
{}
{
  "{" ( BlockStatement(calls) )* "}"
}

void BlockStatement(Vector calls) :
{}
{
  LOOKAHEAD([ "final" ] Type() <IDENTIFIER>)
  LocalVariableDeclaration(calls) ";"
|
  Statement(calls)
|
  UnmodifiedClassDeclaration(new Vector())
|
  UnmodifiedInterfaceDeclaration(new Vector())
}

void LocalVariableDeclaration(Vector calls) :
{}
{
  [ "final" ] Type() VariableDeclarator(calls) ( "," VariableDeclarator(calls) )*
}

void EmptyStatement() :
{}
{
  ";"
}

void StatementExpression(Vector calls) :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{}
{
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression(calls)
  [
    "++"
  |
    "--"
  |
    AssignmentOperator() Expression(calls)
  ]
}

void SwitchStatement(Vector calls) :
{}
{
  "switch" "(" Expression(calls) ")" "{"
    ( SwitchLabel() ( BlockStatement(calls) )* )*
  "}"
}

void SwitchLabel() :
{}
{
  "case" Expression(new Vector()) ":"
|
  "default" ":"
}

void IfStatement(Vector calls) :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{}
{
  "if" "(" Expression(calls) ")" Statement(calls) [ LOOKAHEAD(1) "else" Statement(calls) ]
}

void WhileStatement(Vector calls) :
{}
{
  "while" "(" Expression(calls) ")" Statement(calls)
}

void DoStatement(Vector calls) :
{}
{
  "do" Statement(calls) "while" "(" Expression(calls) ")" ";"
}

void ForStatement(Vector calls) :
{}
{
  "for" "(" [ ForInit(calls) ] ";" [ Expression(calls) ] ";" [ ForUpdate(calls) ] ")" Statement(calls)
}

void ForInit(Vector calls) :
{}
{
  LOOKAHEAD( [ "final" ] Type() <IDENTIFIER> )
  LocalVariableDeclaration(calls)
|
  StatementExpressionList(calls)
}

void StatementExpressionList(Vector calls) :
{}
{
  StatementExpression(calls) ( "," StatementExpression(calls) )*
}

void ForUpdate(Vector calls) :
{}
{
  StatementExpressionList(calls)
}

void BreakStatement() :
{}
{
  "break" [ <IDENTIFIER> ] ";"
}

void ContinueStatement() :
{}
{
  "continue" [ <IDENTIFIER> ] ";"
}

void ReturnStatement(Vector calls) :
{}
{
  "return" [ Expression(calls) ] ";"
}

void ThrowStatement(Vector calls) :
{}
{
  "throw" Expression(calls) ";"
}

void SynchronizedStatement(Vector calls) :
{}
{
  "synchronized" "(" Expression(calls) ")" Block(calls)
}

void TryStatement(Vector calls) :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{}
{
  "try" Block(calls)
  ( "catch" "(" FormalParameter() ")" Block(calls) )*
  [ "finally" Block(calls) ]
}

// added by Andrea Gini
void AssertStatement() :
{
    Vector dummy = new Vector();
}
{
    "assert" Expression(dummy) [ ":" Expression(dummy) ] ";"
}
